apiVersion: v1
kind: Template
metadata:
  name: tarantool-replicaset
  annotations:
    description: "Deploys Tarantool nodes with master-master replication"
    tags: tarantool lua

parameters:
- name: DEPLOYMENT_NAME
  value: tarantool
- name: APP_NAME
  value: tarantool
- name: TARANTOOL_IMAGE
  value: tarantool/tarantool:2.3.1
- name: TARANTOOL_MEMTX_MEMORY
  value: 256Mi
- name: VOLUME_SIZE
  value: 512Mi
- name: TARANTOOL_USER
  description: "Username for the Tarantool instance"
  value: tarantool
- name: TARANTOOL_PASS
  description: "Password securing the Tarantool instance"
  generate: expression
  from: "[a-zA-Z0-9]{16}"

objects:

- apiVersion: v1
  kind: Service
  metadata:
    name: ${DEPLOYMENT_NAME}
    labels:
      app: ${DEPLOYMENT_NAME}
  spec:
    selector:
      app: ${DEPLOYMENT_NAME}
    clusterIP: None
    ports:
      - name: lua
        port: 3301
        targetPort: 3301

- apiVersion: v1
  kind: Service
  metadata:
    name: ${DEPLOYMENT_NAME}-balancer
    labels:
      app: ${DEPLOYMENT_NAME}
  spec:
    type: NodePort
    selector:
      app: ${DEPLOYMENT_NAME}
    ports:
      - name: lua
        port: 3301

- kind: Secret
  apiVersion: v1
  stringData:
    username: ${TARANTOOL_USER}
    password: ${TARANTOOL_PASS}
  metadata:
    name: ${DEPLOYMENT_NAME}-secret
  type: Opaque

- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: ${DEPLOYMENT_NAME}-internal-access
  spec:
    podSelector:
      matchLabels:
        app: ${DEPLOYMENT_NAME}
    ingress:
    - from:
      - podSelector:
          matchLabels:
            app: ${DEPLOYMENT_NAME}

- kind: StatefulSet
  apiVersion: apps/v1beta1
  metadata:
    name: ${DEPLOYMENT_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    serviceName: ${DEPLOYMENT_NAME}
    replicas: 3
    selector:
      matchLabels:
        app: ${APP_NAME}
    podManagementPolicy: Parallel
    template:
      metadata:
        labels:
          app: ${APP_NAME}
      spec:
        terminationGracePeriodSeconds: 30
        containers:
        - name: tarantool
          image: ${TARANTOOL_IMAGE}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: apps-volume
              mountPath: /opt/tarantool
            - name: tarantool-storage
              mountPath: /var/lib/tarantool
            - name: config-volume
              mountPath: /etc/tarantool
            - name: pid-volume
              mountPath: /var/run/tarantool
          ports:
            - name: lua
              protocol: TCP
              containerPort: 3301
          livenessProbe:
            exec:
              command: ["tarantool_is_up"]
            initialDelaySeconds: 35
            timeoutSeconds: 10
          env:
          - name: TARANTOOL_USER_NAME
            valueFrom:
              secretKeyRef:
                name: ${DEPLOYMENT_NAME}-secret
                key: username
          - name: TARANTOOL_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${DEPLOYMENT_NAME}-secret
                key: password
          - name: TARANTOOL_REPLICATION
            value: "${DEPLOYMENT_NAME}-0.${DEPLOYMENT_NAME},${DEPLOYMENT_NAME}-1.${DEPLOYMENT_NAME},${DEPLOYMENT_NAME}-2.${DEPLOYMENT_NAME}"
          - name: TARANTOOL_MEMTX_MEMORY
            value: ${TARANTOOL_MEMTX_MEMORY}
        volumes:
        - name: apps-volume
          emptyDir: {}
        - name: config-volume
          emptyDir: {}
        - name: pid-volume
          emptyDir: {}
    volumeClaimTemplates:
    - metadata:
        name: tarantool-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: ${VOLUME_SIZE}